import asyncio
import os
import socket
import logging
from aiogram import F
import json
import webbrowser
from wakeonlan import send_magic_packet
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import subprocess
import psutil  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è MAC-–∞–¥—Ä–µ—Å–∞
import socket
import shutil
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from pynvml import (
    nvmlInit, nvmlDeviceGetCount, nvmlDeviceGetHandleByIndex,
    nvmlDeviceGetName, nvmlDeviceGetMemoryInfo, nvmlDeviceGetTemperature,
    nvmlShutdown, NVML_TEMPERATURE_GPU
)
from fastapi import FastAPI, Request
from googlesearch import search
from contextvars import ContextVar
from pathlib import Path
class UserState(StatesGroup):
    waiting_for_app = State()
    waiting_for_site = State()
    waiting_for_mac = State()
from dotenv import load_dotenv


def is_executable(file_path):
    return os.path.isfile(file_path) and file_path.endswith('.exe')

app = FastAPI()

load_dotenv()
AUTHORIZED_USERS = set()
CACHE_FILE = "cache.json"

bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher()

waiting_for_site = {}
waiting_for_pid = {}

STATE_WAITING_FOR_SITE = "waiting_for_site"
STATE_WAITING_FOR_APP = "waiting_for_app"



logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π
game_paths = {}
user_data = {}  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


user_states = {}

STATE_WAITING_FOR_APP = "waiting_for_app"
STATE_WAITING_FOR_SITE = "waiting_for_site"


SITES_SYNONYMS = {
    "youtube": ["youtube", "—é—Ç—É–±", "youtub", "—é—Ç—é–±"],
    "google": ["google", "–≥—É–≥–ª", "–≥–æ—É–≥–ª"],
    "facebook": ["facebook", "—Ñ–µ–π—Å–±—É–∫"],
    "instagram": ["instagram", "–∏–Ω—Å—Ç–∞–≥—Ä–∞–º", "–∏–Ω—Å—Ç–∞"],
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–∞–π—Ç—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def is_valid_mac_address(mac_address: str) -> bool:
    # –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –Ω–∞ –¥–≤–æ–µ—Ç–æ—á–∏—è
    mac_address = mac_address.replace("-", ":")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MAC-–∞–¥—Ä–µ—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 17 —Å–∏–º–≤–æ–ª–æ–≤ –∏ 5 –¥–≤–æ–µ—Ç–æ—á–∏–π
    if len(mac_address) == 17 and mac_address.count(":") == 5:
        parts = mac_address.split(":")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –¥–≤—É—Ö—Å–∏–º–≤–æ–ª—å–Ω—ã–º —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º
        for part in parts:
            if len(part) != 2 or not all(c in '0123456789ABCDEFabcdef' for c in part):
                return False
        return True
    return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@dp.message(Command("register"))
async def cmd_register(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –ü–ö:")
    await state.set_state(UserState.waiting_for_mac)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ MAC-–∞–¥—Ä–µ—Å–∞
@dp.message(UserState.waiting_for_mac)
async def handle_mac_address(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    mac_address = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å MAC-–∞–¥—Ä–µ—Å–∞
    if is_valid_mac_address(mac_address):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º MAC-–∞–¥—Ä–µ—Å
        user_data[user_id] = {
            'mac_address': mac_address,
            'pc_name': f"–ü–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        }
        await message.answer(f"–í–∞—à –ü–ö —Å MAC-–∞–¥—Ä–µ—Å–æ–º {mac_address} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MAC-–∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç XX:XX:XX:XX:XX:XX.")


def get_mac_address():
    try:
        for interface, addrs in psutil.net_if_addrs().items():
            for addr in addrs:
                if addr.family == psutil.AF_LINK:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º MAC-–∞–¥—Ä–µ—Å
                    if "Ethernet" in interface or "Wi-Fi" in interface:  # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                        return addr.address
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ MAC-–∞–¥—Ä–µ—Å–∞: {e}")
    return None


def load_cache():
    global game_paths
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, 'r') as file:
            try:
                game_paths = json.load(file)
                print("[LOG] –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω:", game_paths)
            except json.JSONDecodeError:
                print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—ç—à–∞. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
                game_paths = {}
    else:
        print("[ERROR] –§–∞–π–ª –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –≤ —Ñ–∞–π–ª
def save_cache():
    global game_paths
    with open(CACHE_FILE, 'w') as file:
        json.dump(game_paths, file, indent=4)
        print("[LOG] –ö—ç—à —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", game_paths)

def search_in_start_menu(app_name):
    """
    –ü–æ–∏—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é ¬´–ü—É—Å–∫¬ª —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.
    """
    # –ü–∞–ø–∫–∏, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —è—Ä–ª—ã–∫–∏ –∏–∑ –º–µ–Ω—é ¬´–ü—É—Å–∫¬ª
    start_menu_dirs = [
        Path(r"C:\ProgramData\Microsoft\Windows\Start Menu\Programs"),
        Path(os.getenv('APPDATA')) / r"Microsoft\Windows\Start Menu\Programs"
    ]
    
    app_name = app_name.lower()
    for directory in start_menu_dirs:
        for root, _, files in os.walk(directory):
            for file in files:
                if app_name in file.lower() and file.endswith('.lnk'):
                    app_path = os.path.join(root, file)
                    game_paths[app_name] = app_path  # –ö—ç—à–∏—Ä—É–µ–º –ø—É—Ç—å
                    return app_path
    return None

def search_file_on_disks(target_substring):
    target_substring = target_substring.lower()
    extensions = ['.exe', '.bat', '.cmd', '.lnk']  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    for disk in "CDEFG":  # –ü–µ—Ä–µ–±–æ—Ä –¥–∏—Å–∫–æ–≤
        drive = f"{disk}:/"
        if os.path.exists(drive):
            print(f"[DEBUG] –ü–æ–∏—Å–∫ –Ω–∞ –¥–∏—Å–∫–µ {drive}...")
            try:
                for root, _, files in os.walk(drive, topdown=True):
                    for file in files:
                        # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        if target_substring in file.lower() and os.path.splitext(file)[1].lower() in extensions:
                            app_path = os.path.join(root, file)
                            game_paths[target_substring] = app_path  # –ö—ç—à–∏—Ä—É–µ–º –ø—É—Ç—å
                            return app_path
            except PermissionError:
                print(f"[WARNING] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–∫—É {disk}")
    return None

def find_and_open_application(app_name):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –≤ –∫—ç—à–µ, –∑–∞—Ç–µ–º –≤ –º–µ–Ω—é ¬´–ü—É—Å–∫¬ª, –∏—Å–ø–æ–ª—å–∑—É—è —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ.
    """
    app_name = app_name.strip().lower()

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∫—ç—à–µ
    if app_name in game_paths:
        app_path = game_paths[app_name]
        print(f"[DEBUG] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {app_path}")
        try:
            subprocess.Popen(['cmd', '/c', 'start', '', app_path], shell=True)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—Ä–ª—ã–∫
            return f"üéÆ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –∑–∞–ø—É—â–µ–Ω–æ!"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}"

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –º–µ–Ω—é ¬´–ü—É—Å–∫¬ª
    print(f"[DEBUG] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ. –ü–æ–∏—Å–∫ –≤ –º–µ–Ω—é –ü—É—Å–∫...")
    app_path = search_in_start_menu(app_name)
    
    if app_path:
        try:
            print(f"[DEBUG] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é –ü—É—Å–∫: {app_path}")
            subprocess.Popen(['cmd', '/c', 'start', '', app_path], shell=True)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—Ä–ª—ã–∫
            save_cache()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            return f"üéÆ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –Ω–∞–π–¥–µ–Ω–æ –≤ –º–µ–Ω—é –ü—É—Å–∫ –∏ –∑–∞–ø—É—â–µ–Ω–æ!"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é –ü—É—Å–∫: {e}"

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –º–µ–Ω—é ¬´–ü—É—Å–∫¬ª, –∏—â–µ–º –Ω–∞ –¥–∏—Å–∫–µ
    print(f"[DEBUG] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–µ–Ω—é –ü—É—Å–∫. –ü–æ–∏—Å–∫ –Ω–∞ –¥–∏—Å–∫–∞—Ö...")
    app_path = search_file_on_disks(app_name)
    
    if app_path:
        try:
            print(f"[DEBUG] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥–∏—Å–∫–∞: {app_path}")
            subprocess.Popen(app_path, shell=True)  # –ó–∞–ø—É—Å–∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            save_cache()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            return f"üéÆ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –¥–∏—Å–∫–µ –∏ –∑–∞–ø—É—â–µ–Ω–æ!"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥–∏—Å–∫–∞: {e}"

    # –ï—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞—à–ª–∏
    return f"‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."




def kill_process_by_pid(pid):
    try:
        process = psutil.Process(pid)
        process_name = process.name()
        process.terminate()
        return f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {process_name} (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω."
    except psutil.NoSuchProcess:
        return f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except psutil.AccessDenied:
        return f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID {pid}."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}"

def get_running_exe_processes():
    try:
        exe_processes = []
        for process in psutil.process_iter(attrs=['pid', 'name', 'exe']):
            try:
                process_info = process.info
                if process_info['exe'] and process_info['exe'].endswith('.exe'):
                    exe_processes.append(f"{process_info['name']} (PID: {process_info['pid']})")
            except (psutil.AccessDenied, psutil.NoSuchProcess):
                continue

        if exe_processes:
            return (
                "‚öôÔ∏è <b>–°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö .exe –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b>\n" +
                "\n".join(f"‚Ä¢ {proc}" for proc in exe_processes[:50])
            )
        else:
            return "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö .exe –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

async def cmd_kill_process(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        await message.answer(
            "‚ùì –ù–∞–ø–∏—à–∏—Ç–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å.\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /processes.",
            parse_mode="Markdown"
        )
        waiting_for_pid[user_id] = True
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="Markdown")

async def handle_kill_pid(message: types.Message):
    user_id = message.from_user.id
    if user_id in waiting_for_pid and waiting_for_pid[user_id]:
        pid_text = message.text.strip()

        try:
            pid = int(pid_text)
            result = kill_process_by_pid(pid)
            await message.answer(result, parse_mode="Markdown")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).", parse_mode="Markdown")
        waiting_for_pid[user_id] = False
    else:
        await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞.", parse_mode="Markdown")

async def cmd_processes(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        processes_list = get_running_exe_processes()
        await message.answer(processes_list, parse_mode="HTML")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="Markdown")


def get_pc_status():
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¶–ü
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_temp = "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        try:
            sensors = psutil.sensors_temperatures()
            if not sensors:
                cpu_temp = "–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π"
            else:
                for name, entries in sensors.items():
                    for entry in entries:
                        if "cpu" in name.lower() or "coretemp" in name.lower():
                            cpu_temp = entry.current  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            break
        except Exception:
            cpu_temp = "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
        memory = psutil.virtual_memory()
        memory_usage = memory.percent

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö
        disk_usage = shutil.disk_usage('/')
        disk_free_percent = (disk_usage.free / disk_usage.total) * 100

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
        try:
            socket.create_connection(("8.8.8.8", 53), timeout=2)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google DNS
            network_status = "üü¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"
        except OSError:
            network_status = "üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ
        gpu_status = []
        try:
            nvmlInit()
            gpu_count = nvmlDeviceGetCount()
            for i in range(gpu_count):
                handle = nvmlDeviceGetHandleByIndex(i)
                name = nvmlDeviceGetName(handle)  # –£–±–∏—Ä–∞–µ–º .decode('utf-8')
                memory_info = nvmlDeviceGetMemoryInfo(handle)
                memory_total = memory_info.total // (1024 ** 2)  # –≤ –ú–ë
                memory_used = memory_info.used // (1024 ** 2)  # –≤ –ú–ë
                temperature = nvmlDeviceGetTemperature(handle, NVML_TEMPERATURE_GPU)

                gpu_status.append(
                    f"üéÆ GPU {i}: {name}\n"
                    f"   ‚Ä¢ –ü–∞–º—è—Ç—å: {memory_used}MB / {memory_total}MB\n"
                    f"   ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C"
                )
            nvmlShutdown()
        except Exception as e:
            gpu_status.append(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö GPU: {e}")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        status_message = (
            "üñ•Ô∏è <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ö</b>\n"
            f"‚Ä¢ üîã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_percent}%\n"
            f"‚Ä¢ üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_temp}¬∞C\n"
            f"‚Ä¢ üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage}%\n"
            f"‚Ä¢ üìÇ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: {disk_free_percent:.2f}%\n"
            f"‚Ä¢ üåê –°–µ—Ç—å: {network_status}\n\n"
            + "\n\n".join(gpu_status)
        )
        return status_message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ü–ö: {e}"

async def cmd_status(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        pc_status = get_pc_status()
        await message.answer(pc_status, parse_mode="HTML")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="Markdown")

async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        # –ï—Å–ª–∏ MAC-–∞–¥—Ä–µ—Å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–æ—Å–∏–º –µ–≥–æ
        await message.answer("üîß <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –ü–ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –ü–ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return
    else:
        
        await message.answer(
            "üîß <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n"
            "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "üñ•Ô∏è <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö:</b>\n"
            "‚Ä¢ üü¢ <b>/wake</b> ‚Äî –í–∫–ª—é—á–∏—Ç—å –ü–ö (Wake-on-LAN).\n"
            "‚Ä¢ üî¥ <b>/shutdown</b> ‚Äî –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö.\n"
            "‚Ä¢ üõ†Ô∏è <b>/status</b> ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –ø–∞–º—è—Ç—å, —Å–µ—Ç—å).\n\n"
            "üìÇ <b>–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏:</b>\n"
            "‚Ä¢ üõë <b>/close</b> ‚Äî –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
            "‚Ä¢ üíª <b>/open_app</b> ‚Äî –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
            "‚Ä¢ üåê <b>/open_site</b> ‚Äî –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç.\n"
            "‚Ä¢ üìÇ <b>/files</b> ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ).\n\n"
            "‚öôÔ∏è <b>–ü—Ä–æ—Ü–µ—Å—Å—ã:</b>\n"
            "‚Ä¢ üõ†Ô∏è <b>/processes</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö .exe –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n\n"
            "‚Ä¢ üõë <b>/kill_process</b> ‚Äî –≤–≤–µ–¥–∏ –ø–∏–¥.\n\n"
            "‚ÑπÔ∏è <b>–ü—Ä–æ—á–µ–µ:</b>\n"
            "‚Ä¢ ‚ÑπÔ∏è <b>/help</b> ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.\n\n"
            "üîê <b>–í–∞—à ID –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</b>\n"
            "–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )


async def cmd_wake(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        try:
            mac_address = get_mac_address()
            if mac_address:
                send_magic_packet(mac_address)
                await message.answer(f"üü¢ *–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–∞–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*\nMAC-–∞–¥—Ä–µ—Å: {mac_address}", parse_mode="Markdown")
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ MAC-–∞–¥—Ä–µ—Å.", parse_mode="Markdown")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", parse_mode="Markdown")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="Markdown")

async def cmd_shutdown(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        try:
            subprocess.run(["shutdown", "/s", "/f", "/t", "0"])  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
            await message.answer("üî¥ –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...", parse_mode="Markdown")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", parse_mode="Markdown")
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /open_app
@dp.message(Command("open_app"))
async def cmd_open_app(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å:")
    await state.set_state(UserState.waiting_for_app)

@dp.message(UserState.waiting_for_app)
async def handle_app_name(message: types.Message, state: FSMContext):
    app_name = message.text.strip().lower()
    result = find_and_open_application(app_name)
    await message.answer(result)
    await state.clear()

def normalize_site_name(site_name):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞, –ø—Ä–µ–≤—Ä–∞—â–∞—è –µ–≥–æ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä.
    """
    site_name = site_name.strip().lower()
    for key, synonyms in SITES_SYNONYMS.items():
        if site_name in synonyms:
            return key
    return site_name  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å



@dp.message(Command("open_site"))
async def open_site_command_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å:")
    await state.set_state(UserState.waiting_for_site)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ —Å–∞–π—Ç–∞
@dp.message(UserState.waiting_for_site)
async def handle_site_name(message: types.Message, state: FSMContext):
    user_input = message.text.strip().lower()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    site_name = normalize_site_name(user_input)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ Google
    search_query = f"{site_name}"
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ URL-–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        search_results = list(search(search_query, num_results=5))  # –ú—ã –º–æ–∂–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        if search_results:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∞–π—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            url = search_results[0]
            webbrowser.open(url)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            await message.answer(f"–û—Ç–∫—Ä—ã–≤–∞—é –ø–µ—Ä–≤—ã–π —Å–∞–π—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É '{site_name}': {url}")
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∞–π—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{site_name}'.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await state.clear()


async def close_app_command(message: types.Message):
    user_states[message.from_user.id] = "awaiting_app_name"
    await bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å?")


async def process_app_name(message: types.Message):
    if user_states.get(message.from_user.id) == "awaiting_app_name":
        app_name = message.text.strip().lower()
        user_states[message.from_user.id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        closed_processes = []

        for process in psutil.process_iter(['name', 'pid']):
            try:
                if app_name in process.info['name'].lower():
                    os.kill(process.pid, 9)
                    closed_processes.append(process.info['name'])
            except Exception as e:
                await bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {process.info['name']}: {e}")

        if closed_processes:
            closed_list = "\n".join(closed_processes)
            await bot.send_message(
                message.chat.id,
                f"–£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å '{app_name}'"
            )
        else:
            await bot.send_message(message.chat.id, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å '{app_name}'.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
async def cancel_command(message: types.Message):
    if user_states.get(message.from_user.id):
        user_states[message.from_user.id] = None
        await bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await bot.send_message(message.chat.id, "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")



def register_handlers(dp: Dispatcher):
    register_commands(dp) 
    register_message_handlers(dp) 

def register_commands(dp: Dispatcher):
    dp.message.register(send_welcome, Command("start"))
    dp.message.register(cmd_wake, Command("wake"))
    dp.message.register(cmd_shutdown, Command("shutdown"))
    dp.message.register(cmd_open_app, Command("open_app"))
    dp.message.register(cmd_processes, Command("processes"))
    dp.message.register(cmd_kill_process, Command("kill_process"))
    dp.message.register(open_site_command_handler, Command("open_site"))
    dp.message.register(cmd_status, Command('status'))
    dp.message.register(close_app_command, Command('close'))
    dp.message.register(cancel_command, Command('cancel'))


def register_message_handlers(dp: Dispatcher):
    dp.message.register(handle_app_name, F.text & F.state(STATE_WAITING_FOR_APP))  
    dp.message.register(handle_site_name, F.text & F.state(STATE_WAITING_FOR_SITE))
    dp.message.register(process_app_name)


async def main():
    load_cache()
    print("[LOG] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    register_handlers(dp) 
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("[LOG] –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")